#############################################################################
# Standard PyroScope rTorrent Configuration
#
# Include this into your main "~/.rtorrent.rc" for 0.8.6 by adding...
#   system.method.insert = pyro.extended, value|const, 0
#   system.method.insert = pyro.bin_dir, string|const,
#   system.method.insert = pyro.rtorrent_rc, string|const|private, "$cat=~/.pyroscope/rtorrent-,\"$system.client_version=\",.rc.default"
#   import = $pyro.rtorrent_rc=
#
# For 0.8.8 and up, use "method.insert" instead.
#
# Remove the ".default" if you want to change something (else your
# changes get over-written on update).
#
# Set "pyro.extended" to 1 to activate rTorrent-PS features, but ONLY if
# you actually run that patched version of rTorrent!
#
# Things marked with ♯087♯ are for version 0.8.7+ only (the migration script
# reacts on that)!
#

# Log extension switch setting
branch=pyro.extended=,print=rTorrent-PS\\\ features\\\ active!,print=rTorrent-PS\\\ features\\\ NOT\\\ active!

# COMMAND: Return startup time (can be used to calculate uptime)
system.method.insert = startup_time,value|const,$system.time=

# EVENTS: Timestamps
#   tm_loaded = time loaded into client
#   tm_started = time of *first* start
#   tm_completed = time of completion
system.method.insert = pyro.tm_started.now,simple|private,"d.set_custom=tm_started,$cat=$system.time= ;d.save_session="
system.method.set_key = event.download.resumed,time_stamp,"branch=d.get_custom=tm_started,false=,pyro.tm_started.now="
system.method.set_key = event.download.inserted_new,time_stamp,"d.set_custom=tm_loaded,$cat=$system.time= ;d.save_session="
system.method.set_key = event.download.finished,time_stamp,"d.set_custom=tm_completed,$cat=$system.time= ;d.save_session="

# EVENTS: Activation intervals
system.method.insert = pyro.activations.append,simple|private,"d.set_custom=activations,\"$cat=$d.get_custom=activations,$argument.0=,$system.time=\" ;d.save_session="
system.method.set_key = event.download.paused,activations,"pyro.activations.append=P"
system.method.set_key = event.download.resumed,activations,"pyro.activations.append=R"

# EVENTS: Timestamp 'tm_downloaded' (time when meta (torrent) file was downloaded)
method.insert = pyro._tm_downloaded_stat, simple|private, "execute.capture=sh,-c,\"echo -n \$(stat -c %Y \\\"$1\\\")\",getDownloadedDate,(d.tied_to_file)"
method.insert = pyro._tm_downloaded_init, simple|private, "d.custom.set=tm_downloaded,(cat,(pyro._tm_downloaded_stat)); d.save_full_session="
method.insert = d.timestamp.downloaded, simple, "d.custom=tm_downloaded"
method.set_key = event.download.inserted_new, set_downloaded_date, ((pyro._tm_downloaded_init))

# SCHEDULE: Set "last_active" custom field for items that have peers
system.method.insert = d.last_active, simple, "if=$d.peers_connected=,$cat=$system.time=,$d.custom=last_active"
schedule = update_last_active,24,42,"d.multicall=started,\"branch=$d.peers_connected=,\\\"d.custom.set=last_active,$cat=$system.time=\\\"\""
system.method.insert = d.last_active.print, simple|private, "print=\"$cat={$convert.date=$d.last_active=, \\\" \\\", $convert.time=$d.last_active=}\""
system.method.set_key = event.download.resumed,last_active,"d.set_custom=last_active,$cat=$system.time= ;d.save_session="
system.method.set_key = event.download.finished,last_active,"d.set_custom=last_active,$cat=$system.time= ;d.save_session="

# UI/VIEW: Default view for filtering results (bound to '^' key in rT-PS)
view_add = rtcontrol
view_filter = rtcontrol,false=
branch=pyro.extended=,"schedule = bind_rtcontrol,0,0,\"ui.bind_key=download_list,^,ui.current_view.set=rtcontrol\""

# UI/VIEW: Show current messages (bound to '!' in rT-PS)
view_add = messages
view_filter = messages,d.get_message=
branch=pyro.extended=,false=,"view_sort_new = messages,less=d.get_message="
branch=pyro.extended=,"view_sort_new = messages,\"compare=,d.get_message=,d.get_name=\""
branch=pyro.extended=,false=,"view_sort_current = messages,less=d.get_message="
branch=pyro.extended=,"view_sort_current = messages,\"compare=,d.get_message=,d.get_name=\""
system.method.insert = ui.messages.show,simple,"ui.current_view.set=messages ;view_sort=messages ;print=$view.size=messages,\" message(s)!\""
branch=pyro.extended=,"schedule = bind_messages,0,0,\"ui.bind_key=download_list,!,ui.messages.show=\""

# UI/VIEW: Trackers (all items, sorted by tracker domain and name)
#          This will ONLY work if you use rT-PS!
branch=pyro.extended=,"view_add = trackers"
branch=pyro.extended=,"view.collapsed.toggle = trackers"
branch=pyro.extended=,"view_sort_new     = trackers,\"compare=,d.tracker_domain=,d.get_name=\""
branch=pyro.extended=,"view_sort_current = trackers,\"compare=,d.tracker_domain=,d.get_name=\""
branch=pyro.extended=,"schedule = bind_trackers,0,0,\"ui.bind_key=download_list,t,ui.current_view.set=trackers\""

# UI/VIEW: Manually tag (select) items
# . = toggle focused item between tagged and untagged
# T = clear all tags
# : = show tagged items view
view_add = tagged
view.persistent = tagged
branch=pyro.extended=,view.collapsed.toggle=tagged
system.method.insert = view.toggle_visible,simple,"branch=d.views.has=$argument.0=,view.set_not_visible=$argument.0=,view.set_visible=$argument.0="
system.method.insert = pyro.view_tagged_clear,simple|private,"view.filter=tagged,false= ;d.multicall=main,d.views.remove=tagged"
branch=pyro.extended=,"schedule = bind_tag_toggle,0,0,\"ui.bind_key=download_list,.,view.toggle_visible=tagged\""
branch=pyro.extended=,"schedule = bind_tag_clear,0,0,\"ui.bind_key=download_list,T,pyro.view_tagged_clear=\""
branch=pyro.extended=,"schedule = bind_tag_show,0,0,\"ui.bind_key=download_list,:,ui.current_view.set=tagged\""

# UI/VIEW: Bind "*" to toggle between collapsed and expanded display
branch=pyro.extended=,"schedule = bind_collapsed,0,0,\"ui.bind_key=download_list,*,view.collapsed.toggle=\""

# UI/CMD: Use rtcontrol filter (^X s=KEYWORD, ^X t=TRACKER, ^X f="FILTER")
system.method.insert = s,simple|private,"execute_nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",--detach,-qV,\"$cat=*,$argument.0=,*\""
system.method.insert = t,simple|private,"execute_nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",--detach,-qV,\"$cat=\\\"alias=\\\",$argument.0=\""
system.method.insert = f,simple|private,"execute_nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",--detach,-qV,$argument.0="

# UI/CMD: Housekeeping (delete item + data)
system.method.insert = purge,simple|private,"execute_nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",-q,--detach,--purge,--yes,\"$cat=hash=,$d.get_hash=\""
system.method.insert = cull,simple|private,"execute_nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",-q,--detach,--cull,--yes,\"$cat=hash=,$d.get_hash=\""

# TORQUE: View for queue manager job
# (this is not the buggy internal scheduler controlled by scheduler.max_active)
view_add = pyrotorque
view_filter = pyrotorque,false=
schedule = filter_pyrotorque,1,15,"view_filter = pyrotorque,\"or={d.get_up_rate=,d.get_down_rate=,d.get_peers_connected=,not=$d.get_complete=}\""
branch=pyro.extended=,"schedule = bind_pyrotorque,0,0,\"ui.bind_key=download_list,Q,ui.current_view.set=pyrotorque\""

# TORQUE: Daemon watchdog
system.method.insert = pyro.watchdog,simple|private,"execute_nothrow=bash,-c,\"$cat=\\\"test ! -f \\\",$argument.0=,\\\"/run/pyrotorque || \\\",$pyro.bin_dir=,\\\"pyrotorque --cron \\\",$argument.1=\""


### begin: Sending scrape requests ###

# Regularly update scrape information for all torrents (even stopped ones), it won't affect the operation of rtorrent, but nice to have these values updated.
# This info is only updated when rtorrent starts or a torrent is added by default.
# Try to balance calls to not fire them up at the same time (since multiscraping isn't implemented in libtorrent). Check for update every 5 minutes and distinguish between 2 groups:
#   - transferring (uploading and/or downloading) torrents: update in every 10 minutes
#   - non-transferring torrents: update in every 12 hours
# helper method: sets current time in a custom field (tm_last_scrape) and saves session
method.insert = d.last_scrape.set, simple|private, "d.custom.set=tm_last_scrape,$cat=$system.time=; d.save_full_session="
# helper method: sends the scrape request and sets the tm_last_scrape timestamp and saves session
method.insert = d.last_scrape.send_set, simple, "d.tracker.send_scrape=0;d.last_scrape.set="
# helper method: decides whether the required time interval (with the help of an argument) has passed and if so calls the above method
method.insert = d.last_scrape.check_elapsed, simple|private, "branch={(elapsed.greater,$d.custom=tm_last_scrape,$argument.0=),d.last_scrape.send_set=}"
# helper method: checks for non-existing/empty custom field to be able to test its validity later
method.insert = d.last_scrape.check, simple|private, "branch={d.custom=tm_last_scrape,d.last_scrape.check_elapsed=$argument.0=,d.last_scrape.send_set=}"
# sets custom field (tm_last_scrape) to current time only for torrents just has been added (skips setting time on purpose when rtorrent started)
method.set_key = event.download.inserted_new, last_scrape_i, "d.last_scrape.set="
# check for update every 5 minutes (300 sec) and update scrape info for transferring torrents in every 10 minutes (600-20=580 sec) and for non-transferring ones in every 12 hours (43200-20=43180 sec)
schedule2 = last_scrape_t, 300, 300, "d.multicall2=main,\"branch=\\\"or={d.up.rate=,d.down.rate=}\\\",d.last_scrape.check=580,d.last_scrape.check=43180\""

# UI/KEY: Bind "#" to send scrape request manually
branch=pyro.extended=,"schedule2 = bind_send_scrape,0,0,\"ui.bind_key=download_list,#,d.last_scrape.send_set=\""

### end: Sending scrape requests ###
